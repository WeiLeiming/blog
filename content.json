[{"title":"hexo搭建个人博客","date":"2017-03-09T03:05:28.000Z","path":"2017/03/09/hexo搭建个人博客/","text":"总结下自己用hexo搭建博客的过程。整个博客是挂在GitHub Pages上的，域名是自己买的，搭建时hexo是3.2.2版本，因为自己用的Mac电脑，所以此篇适用于苹果电脑。废话不多说，正式开始吧。 环境配置安装Node.js到Node.js官网下载对应平台的最新版本，按提示安装即可 安装Git因为我已经装了Xcode所以自带Git（否则会叫安装Xcode，那就安装咯） Hexo安装Node.js和Git安装好后就可以安装Hexo了 12345$ npm install hexo-cli -g$ hexo init blog$ cd blog$ npm install$ hexo server 如果没出错，就可以在本地服务上http://localhost:4000/查看效果了。 这是我blog文件夹下的目录结构 配置修改在_config.yml中，新建的md文件都放置在/source/_posts中，themes放置的是主题 介绍下Hexo常用的命令新建文章 1$ hexo new &quot;文章名称&quot; 生成静态网页 1$ hexo g 启动本地服务 1$ hexo s 上传部署 1$ hexo d GitHub配置申请账号略 新建Repository这里只有一个地方需要说明，就是Repository name。 填写格式为：username.github.io 比如我的账号是weileiming，那么我的主页地址就是weileiming.github.io 我这因为已经建过了所以报了这个错，没有新建过的话再点Create repository就可以建立了 还不懂的可以看看官方文档 Hexo关联Repository在_config.yml中将新建的仓库添加上 Github Pages个人主页绑定个人域名如果有个人域名的话，可以绑定自己的个人域名。官方文档 如何申请个人域名百度去吧。 申请好之后添加解析 去刚刚建立的仓库里面点击Create new file 文件名填写CNAME，内容填写个人域名，commit上去就可以用个人域名访问了 当然如果是拿来用hexo做博客的话这样CNAME是会被干掉的，所以这样搞不行，我将CNAME放在了这里 然后在用hexo一起部署上去 Hexo的一些主题以下是我个人喜欢的一些主题，集成步骤都比较简单 hexo-theme-next hexo-theme-yilia 修改配置的话，以yilia举例，主题的配置文件是themes/yilia下_config.yml 一些技巧在文章中加&lt;!--more--&gt;可以使这之后的内容隐藏","tags":[{"name":"奇淫巧技","slug":"奇淫巧技","permalink":"http://loonkit.com/tags/奇淫巧技/"}]},{"title":"Unity导出Xcode工程集成进另一个原生Xcode工程,错误及解决方法记录","date":"2017-03-02T03:23:02.000Z","path":"2017/03/02/Unity导出Xcode工程集成进另一个原生Xcode工程,错误及解决方法记录/","text":"最近在研究Unity导出的Xcode工程如何集成在现有工程中。现将过程中遇见的问题整理如下。 Unity导出Xcode工程编译错误 MapFileParser.sh: Permission denied 打开终端，进入MapFileParser.sh所在目录，执行 1$ chmod 777 MapFileParser.sh Unity导出Xcode工程集成进原生Xcode工程集成步骤Unity导出Xcode工程在iOS的Player Setting中进行设置 Resolution and Presentation 根据项目需要设定，需要注意的是Orientation方向必须是原生工程Orientation方向的子集 Other Settings 消掉Auto Graphics API，Graphics APIs列表中只留OpenGLES2 Scripting Backend选择IL2CPP Bundle Identifier、Target Device、Target minimum iOS Version根据原生工程设置 集成工程 ​ 集成过程中遇见的一些问题 编译完成出现许多Code will never be executed的警告⚠️ 解决方法：在Build Settings中将Unreachable Code设置为No可以消除警告 参考资料iOS Player Settings Unity3D工程并入iOS工程总结 unity3D与iOS原生工程项目合并以及合并过程中的问题 iOS - 将Unity导出的Xcode工程导入到另一个Xcode项目, 及常见报错的解决方法 将U3d工程嵌入iOS工程中","tags":[{"name":"iOS","slug":"iOS","permalink":"http://loonkit.com/tags/iOS/"},{"name":"Unity","slug":"Unity","permalink":"http://loonkit.com/tags/Unity/"}]},{"title":"对未来职业方向的一些想法","date":"2017-03-01T01:49:46.000Z","path":"2017/03/01/对未来职业方向的一些想法/","text":"进入2017年，互联网资本寒冬依然在持续，随着现在公司的业务调整，重心放在行业应用，自己公司的产品放缓，运营部已快解散，对未来的方向产生了一些迷茫。 继续深挖iOS 结合现有公司资源做一部分Unity工作 兼职一部分后台工作 继续深挖iOS此方向在现有公司已不适合发展。 公司是做PC端VR应用的，移动端开发不是重点。 公司缺乏技术沉淀 没有iOS开发的高级人员 业务已转型，运营部解散，后台已走 选择此方向面临的第一个问题便是找下家，寻找主做移动端技术的公司。不过由于现在不想离开这家公司，待考虑。 iOS高级工程师进阶 结合现有公司资源做一部分Unity工作公司毕竟是做VR/AR的，在图形图像方面还是有一定的积累，也会做一些培训工作，并且这个方向也是我比较喜欢的，OneV’s Den也是iOS/Unity开发者，是我一直想学习的。最近看了一点Unity的学习资料，整体来说Unity还是比较轻松的，比UE简单很多。iOS/Unity并重的话，或许来个手游开发？ 兼职一部分后台工作现在公司APP开发放缓，后台也走人了，还不招人，想要继续搞下去，必须得有人兼职一部分后台的工作，考虑到以后回成都发展，想要好找工作的话还是JAVA合适点，或许可以看看。 附上一张知乎@张宇上看到的iOS技能树","tags":[{"name":"随笔","slug":"随笔","permalink":"http://loonkit.com/tags/随笔/"}]},{"title":"Mac系统隐藏文件的设置","date":"2017-02-24T02:28:50.000Z","path":"2017/02/24/Mac系统隐藏文件的设置/","text":"显示Mac隐藏文件的命令 1$ defaults write com.apple.finder AppleShowAllFiles YES 隐藏Mac隐藏文件的命令1$ defaults write com.apple.finder AppleShowAllFiles NO","tags":[{"name":"Mac","slug":"Mac","permalink":"http://loonkit.com/tags/Mac/"},{"name":"奇淫巧技","slug":"奇淫巧技","permalink":"http://loonkit.com/tags/奇淫巧技/"}]},{"title":"iOS开发常用宏整理","date":"2017-02-20T02:01:26.000Z","path":"2017/02/20/iOS开发常用宏整理/","text":"使用宏不仅方便，而且可以提高开发效率。整理了一下在自己项目中常用的宏。以下均写在Macro.h文件中。 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586// 一些缩写#define kApplication [UIApplication sharedApplication]#define kKeyWindow [UIApplication sharedApplication].keyWindow#define kAppDelegate [UIApplication sharedApplication].delegate#define kUserDefaults [NSUserDefaults standardUserDefaults]#define kNotificationCenter [NSNotificationCenter defaultCenter]#define kDevice [UIDevice currentDevice]// 获取屏幕宽度与高度#define SCREEN_WIDTH [UIScreen mainScreen].bounds.size.width#define SCREEN_HEIGHT [UIScreen mainScreen].bounds.size.height#define SCREEN_SIZE [UIScreen mainScreen].bounds.size#define SCREEN_MAX_LENGTH MAX(SCREEN_WIDTH, SCREEN_HEIGHT)#define SCREEN_MIN_LENGTH MIN(SCREEN_WIDTH, SCREEN_HEIGHT)// 字符串是否为空#define kStringIsEmpty(str) (str == nil || [str isKindOfClass:[NSNull class]] || str.length == 0)// 数组是否为空#define kArrayIsEmpty(array) (array == nil || [array isKindOfClass:[NSNull class]] || array.count == 0)// 字典是否为空#define kDictIsEmpty(dict) (dict == nil || [dict isKindOfClass:[NSNull class]] || dict.allKeys.count == 0)// 是否是空对象#define kObjectIsEmpty(_object) (_object == nil || [_object isKindOfClass:[NSNull class]] || ([_object respondsToSelector:@selector(length)] &amp;&amp; [(NSData *)_object length] == 0) || ([_object respondsToSelector:@selector(count)] &amp;&amp; [(NSArray *)_object count] == 0))// 判断是否为iPhone#define IS_IPHONE (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPhone)// 判断是否为iPad#define IS_IPAD (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPad)// 判断型号尺寸.5为4寸机型，6为4.7寸机型，6P为5.5寸机型#define IS_IPHONE_4_OR_LESS (IS_IPHONE &amp;&amp; SCREEN_MAX_LENGTH &lt; 568.f)#define IS_IPHONE_5 (IS_IPHONE &amp;&amp; SCREEN_MAX_LENGTH == 568.f)#define IS_IPHONE_6 (IS_IPHONE &amp;&amp; SCREEN_MAX_LENGTH == 667.f)#define IS_IPHONE_6P (IS_IPHONE &amp;&amp; SCREEN_MAX_LENGTH == 736.f)// APP名称#define kAppName [[NSBundle mainBundle] infoDictionary] objectForKey:@&quot;CFBundleDisplayName&quot;]// APP版本号#define kAppVersion [[NSBundle mainBundle] infoDictionary] objectForKey:@&quot;CFBundleShortVersionString&quot;]// APP build号#define kAppbuild [[NSBundle mainBundle] infoDictionary] objectForKey:@&quot;CFBundleVersion&quot;]// 系统版本号#define kSystemVersion [[UIDevice currentDevice] systemVersion]// 获取当前语言#define kCurrentLanguage [[NSLocale preferredLanguages] objectAtIndex:0]// 获取沙盒Documents路径#define kDocumentsPath [NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES) firstObject]// 获取沙盒temp路径#define kTempPath NSTemporaryDirectory()// 获取沙盒Cache路径#define kCachePath [NSSearchPathForDirectoriesInDomains(NSCachesDirectory, NSUserDomainMask, YES) firstObject]// 颜色#define kRGBColor(r, g, b) [UIColor colorWithRed:(r) / 255.f green:(g) / 255.f blue:(b) / 255.f alpha:1.f]#define kRGBAColor(r, g, b, a) [UIColor colorWithRed:(r) / 255.f green:(r) / 255.f blue:(r) / 255.f alpha:a]#define kRandomColor kRGBColor(arc4random_uniform(256), arc4random_uniform(256), arc4random_uniform(256))#define kColorWithHex(rgbValue) [UIColor colorWithRed:((float)((rgbValue &amp; 0xFF0000) &gt;&gt; 16)) / 255.f green:((float)((rgbValue &amp; 0xFF00) &gt;&gt; 8)) / 255.f blue:((float)(rgbValue &amp; 0xFF)) / 255.f alpha:1.f]// 弱引用/强引用.在Code Snippet中添加@kWeakObj（@WeakObj(&lt;#obj#&gt;);）#define kWeakObj(obj) autoreleasepool&#123;&#125; __weak typeof(obj) weak##obj = obj;#define kStrongObj(obj) autoreleasepool&#123;&#125; __strong typeof(obj) obj = weak##obj;// 由角度转换弧度#define kDegreesToRadian(x) (M_PI * x / 180.f)// 由弧度转换角度#define kRadianToDegrees(x) (x * 180.f) / (M_PI)// 获取一段时间间隔#define kStartTime CFAbsoluteTime start = CFAbsoluteTimeGetCurrent();#define kEndTime NSLog(@&quot;Time: %f&quot;, CFAbsoluteTimeGetCurrent() - start)// 开发的时候打印，但是发布的时候不打印的NSLog#ifdef DEBUG #define NSLog(...) NSLog(@&quot;%s [Line %d]\\n%@&quot;, __func__, __LINE__, [NSString stringWithFormat:__VA_ARGS__])// #define DLog(fmt, ...) NSLog((@&quot;%s [Line %d]\\n&quot; fmt), __PRETTY_FUNCTION__, __LINE__, ##__VA_ARGS__);#else #define NSLog(...)// #define DLog(...)#endif// 判断是真机还是模拟器#if TARGET_OS_IPHONE// 真机#endif#if TARGET_IPHONE_SIMULATOR// 模拟器#endif","tags":[{"name":"iOS","slug":"iOS","permalink":"http://loonkit.com/tags/iOS/"}]},{"title":"CocoaPods使用备忘录","date":"2017-02-17T02:07:32.000Z","path":"2017/02/17/CocoaPods使用备忘录/","text":"CocoaPods 安装 如果网络已经翻墙，在终端中运行如下命令直接安装： 1sudo gem install cocoapods 如果没翻墙，可以通过国内 Ruby China 或淘宝的 RubyGems 镜像进行安装。在终端依次运行以下命令：移除ruby的原生镜像 1gem sources --remove https://rubygems.org/ 用淘宝的镜像代替（淘宝的镜像源停止更新了，请使用Ruby China的镜像) 1gem sources -a https://ruby.taobao.org/ 用Ruby China的镜像代替1gem sources --add https://gems.ruby-china.org/ 查看是否设置成功123456gem sources -l如果输出结果是如下这样，那说明这一步就成功了。*** CURRENT SOURCES ***https://gems.ruby-china.org/ 安装Cocoapods1sudo gem install cocoapods 其他一些命令查询Cocoapods是否支持某个类库1pod search 类库名 这个命令搜索的是本机上的最新版本，并没有联网查询。如果运行以上命令，没有搜到或者搜不到最新版本，可以运行以下命令，更新一下本地的 CocoaPods 源列表1pod repo update 打开终端，进入到工程目录，执行以下命令，会自动生成一个 Podfile 文件1pod init 安装框架1pod install 更新框架1234pod update或# 禁止升级 CocoaPods 的 spec 仓库，否则会卡在 Analyzing dependencies，非常慢pod update --verbose --no-repo-update 如果提示找不到库，则可去掉--no-repo-update。 在CocoaPods 中，有几种设置类库版本的方法。如： >= 1.10.X 会根据本地的 CocoaPods 源列表，导入不低于 1.10.X 版本的类库。 ~&gt; 1.10.X 会根据本地的 CocoaPods 源列表，介于 1.10.X~1.11.0 之前版本的类库。 建议锁定版本，便于团队开发。如，指定 1.10.0 版本 1pod &apos;类库名&apos;, &apos;1.10.0&apos; 清除 Cocoapods 本地缓存特殊情况下，由于网络或者别的原因，通过 CocoaPods 下载的文件可能会有问题。这时候可以删除 CocoaPods 的缓存(~/Library/Caches/CocoaPods/Pods/Release 目录)，再次导入即可。 关于 CocoaPods 的更多内容，可以参考 CocoaPods 文档。","tags":[{"name":"iOS","slug":"iOS","permalink":"http://loonkit.com/tags/iOS/"}]},{"title":"iOS自定义视图四个角的圆角","date":"2017-02-16T08:13:53.000Z","path":"2017/02/16/iOS自定义视图四个角的圆角/","text":"最近有一个需求：一个视图下面两个角需要圆角，而上面两个角不需要。 可以使用UIBezierPath和CAShapeLayer结合实现 1+ (UIBezierPath *)bezierPathWithRoundedRect:(CGRect)rect byRoundingCorners:(UIRectCorner)corners cornerRadii:(CGSize)cornerRadii; 参数corners指定了想要需要成为圆角的角。可选值为：1234567typedef NS_OPTIONS(NSUInteger, UIRectCorner) &#123; UIRectCornerTopLeft = 1 &lt;&lt; 0, UIRectCornerTopRight = 1 &lt;&lt; 1, UIRectCornerBottomLeft = 1 &lt;&lt; 2, UIRectCornerBottomRight = 1 &lt;&lt; 3, UIRectCornerAllCorners = ~0UL&#125;; 使用示例： 123456789UIView *view = [[UIView alloc] initWithFrame:CGRectMake(10, 10, 50, 50)];view.backgroundColor = [UIColor redColor];[self.view addSubview:view]; UIBezierPath *maskPath = [UIBezierPath bezierPathWithRoundedRect:view.bounds byRoundingCorners:UIRectCornerBottomLeft | UIRectCornerBottomRight cornerRadii:CGSizeMake(10, 10)];CAShapeLayer *maskLayer = [[CAShapeLayer alloc] init];maskLayer.frame = view.bounds;maskLayer.path = maskPath.CGPath;view.layer.mask = maskLayer; 如果需要将UIView的4个角全部都为圆角，做法相当简单，只需设置其Layer的cornerRadius属性即可。","tags":[{"name":"iOS","slug":"iOS","permalink":"http://loonkit.com/tags/iOS/"}]},{"title":"iOS如何利用runtime向Category添加属性","date":"2017-02-05T06:56:14.000Z","path":"2017/02/05/iOS如何利用runtime向Category添加属性/","text":"Associated Objects 使用runtime需导入头文件 1#import &lt;objc/runtime.h&gt; 以下方法允许对象在运行时通过键关联任意值 12objc_getAssociatedObject(id object, const void *key);objc_setAssociatedObject(id object, const void *key, id value, objc_AssociationPolicy policy); Associative Object Behaviors 在runtime.h中的定义 123456789101112131415/** * Policies related to associative references. * These are options to objc_setAssociatedObject() */typedef OBJC_ENUM(uintptr_t, objc_AssociationPolicy) &#123; OBJC_ASSOCIATION_ASSIGN = 0, /**&lt; Specifies a weak reference to the associated object. */ OBJC_ASSOCIATION_RETAIN_NONATOMIC = 1, /**&lt; Specifies a strong reference to the associated object. * The association is not made atomically. */ OBJC_ASSOCIATION_COPY_NONATOMIC = 3, /**&lt; Specifies that the associated object is copied. * The association is not made atomically. */ OBJC_ASSOCIATION_RETAIN = 01401, /**&lt; Specifies a strong reference to the associated object. * The association is made atomically. */ OBJC_ASSOCIATION_COPY = 01403 /**&lt; Specifies that the associated object is copied. * The association is made atomically. */&#125;; 根据枚举类型objc_AssociationPolicy定义的行为，可以将值关联到对象上 Behavior @property Equivalent OBJC_ASSOCIATION_ASSIGN @property (assign) 或 @property (unsafe_unretained) OBJC_ASSOCIATION_RETAIN_NONATOMIC @property (nonatomic, strong) OBJC_ASSOCIATION_COPY_NONATOMIC @property (nonatomic, copy) OBJC_ASSOCIATION_RETAIN @property (atomic, strong) OBJC_ASSOCIATION_COPY @property (atomic, copy) 使用示例NSObject+AssociatedObject.h123@interface NSObject (AssociatedObject)@property (nonatomic, strong) id associatedObject;@end NSObject+AssociatedObject.m12345678910@implementation NSObject (AssociatedObject)@dynamic associatedObject;- (void)setAssociatedObject:(id)object &#123; objc_setAssociatedObject(self, @selector(associatedObject), object, OBJC_ASSOCIATION_RETAIN_NONATOMIC);&#125;- (id)associatedObject &#123; return objc_getAssociatedObject(self, @selector(associatedObject));&#125; 通常建议键是一个静态字符。 12static char kAssociatedObjectKey;objc_getAssociatedObject(self, &amp;kAssociatedObjectKey); 当然，存在一个简单得多的解决方案：只需使用selector。 更详细的参考请访问[Associated Objects]","tags":[{"name":"iOS","slug":"iOS","permalink":"http://loonkit.com/tags/iOS/"},{"name":"runtime","slug":"runtime","permalink":"http://loonkit.com/tags/runtime/"},{"name":"Category","slug":"Category","permalink":"http://loonkit.com/tags/Category/"}]},{"title":"写在2017开端","date":"2017-02-04T01:59:05.000Z","path":"2017/02/04/写在2017开端/","text":"2016过去的2016，是自己的本命年，也是自己毕业后在深圳度过的第一个完整年份。这一年，算是自己的一个转折之年，没有了初入社会的忐忑，在深圳安定了下来，学到了许许多多的东西，也结交了很多好朋友。 这一年收获无疑是巨大的，对后续人生影响是不可估量的。 20172017年，是安心学习沉淀自己技术的一年，牢记。","tags":[{"name":"随笔","slug":"随笔","permalink":"http://loonkit.com/tags/随笔/"}]},{"title":"我的第一个博客发文","date":"2017-01-22T07:59:51.000Z","path":"2017/01/22/我的第一个博客发文/","text":"为了更好的明天 第一个博客采用了hexo，主题用的是yilia，在此感谢为此做出贡献的大神。 2016年就想搭建自己的博客来总结自己的得失，一直拖到现在才搭建好。刚入社会的坎坷已经过去，陆陆续续学到了很多东西，是时候记录总结了。以后会陆陆续续开始写博客啦，还可以锻炼下自己渣到吐的文字表达能力，加油~","tags":[{"name":"随笔","slug":"随笔","permalink":"http://loonkit.com/tags/随笔/"}]},{"title":"Hello World","date":"2017-01-19T16:00:00.000Z","path":"2017/01/20/hello-world/","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","tags":[{"name":"hexo","slug":"hexo","permalink":"http://loonkit.com/tags/hexo/"}]}]